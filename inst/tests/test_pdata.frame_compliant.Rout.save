
R version 4.3.0 (2023-04-21 ucrt) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(plm)
> 
> set.seed(42)
> A = c(runif(100))
> B = c(runif(100))
> C = c(runif(100))
> df <- data.frame(A,B,C)
> df$id <- floor((as.numeric(rownames(df))-1)/10)
> df$t <- ave(df$A, df$id, FUN = seq_along)
> 
> form <- A ~ B + C
> 
> pdf <- pdata.frame(df, index = c("id","t"))
> pdf_base <- subset(pdf, (as.numeric(pdf$t) < 8))
> 
> # library(dplyr)
> # ## dplyr is not pdata.frame-aware/does not subset the index in row-filtering
> # pdf_dplyr <- pdf %>% filter(as.numeric(t) < 8)
> 
> ## emulate dplyr behaviour (no subsetting of index) so no dependency to dplyr for test is necessary
> pdf_dplyr <- subset(df, (as.numeric(df$t) < 8))
> pdf_dplyr <- pdata.frame(pdf_dplyr, index = c("id", "t"))
> attr(pdf_dplyr, "index") <- index(pdf)
> 
> ### Demonstration of issue
> # lm(): results are the same
> print(lm(form, data = pdf_base))

Call:
lm(formula = form, data = pdf_base)

Coefficients:
(Intercept)            B            C  
     0.5564      -0.1642       0.1581  

> print(lm(form, data = pdf_dplyr))

Call:
lm(formula = form, data = pdf_dplyr)

Coefficients:
(Intercept)            B            C  
     0.5564      -0.1642       0.1581  

> 
> # plm(): results differ for ill-conditioned pdata.frame:
> print(plm(form, data = pdf_base,  method = "within"))

Model Formula: A ~ B + C

Coefficients:
       B        C 
-0.20179  0.11307 

> # print(plm(form, data = pdf_dplyr, method = "within")) # errors
> 
> # plm(): correct with well-behaved pdata.frame
> pdf_dplyr_fixed <- pdata.frame(as.data.frame(pdf_dplyr), c("id", "t"))
> print(plm(form, data = pdf_dplyr_fixed))

Model Formula: A ~ B + C

Coefficients:
       B        C 
-0.20179  0.11307 

> 
> nrow(pdf_base)         # 70
[1] 70
> nrow(index(pdf_base))  # 70
[1] 70
> nrow(pdf_dplyr)        # 70
[1] 70
> nrow(index(pdf_dplyr)) # 100 (should be 70 to be a proper pdata.frame)
[1] 100
> nrow(pdf_dplyr_fixed)        # 70
[1] 70
> nrow(index(pdf_dplyr_fixed)) # 70
[1] 70
> 
> plm:::is.pdata.frame(pdf_base)
[1] TRUE
> plm:::is.pdata.frame(pdf_dplyr) ## ill-behaved pdata.frame is detected
[1] FALSE
> 
> ## these should give a proper warning about ill-behaved pdata.frame
> #plm(  form, data = pdf_dplyr) # warns
> #pggls(form, data = pdf_dplyr) # warns
> #pcce( form, data = pdf_dplyr) # warns
> #pmg(  form, data = pdf_dplyr) # warns
> pvcm( form, data = pdf_dplyr) # warns

Model Formula: A ~ B + C

Coefficients:
  (Intercept)         B         C
0     0.78116 -0.028017 -0.113573
1     0.43220 -0.615856  0.900289
2     0.54642 -0.048754 -0.130432
3     0.39129 -0.259538  0.993062
4     0.45999  0.195818  0.033738
5     0.58210 -0.408266 -0.055073
6     0.89948 -0.442882 -0.383766

Warning messages:
1: In is.pdata.frame(data, feedback = "warn") :
  input data claims to be a pdata.frame but does not seem to have compliant properties, results can be unreliable. This can happen due to data manipulation by non-pdata.frame-aware functions (e.g., 'dplyr' on pdata.frame). 
 Maybe re-create data input as fresh pdata.frame after last data manipulation with other tools.
2: In split.default(x = seq_len(nrow(x)), f = f, drop = drop, ...) :
  data length is not a multiple of split variable
> #pldv( form, data = pdf_dplyr) # warns
> #pgmm( A ~ B + C | lag(C, 2:10), data = pdf_dplyr) # warns
> 
> # test for re-creation of a compliant pdata.frame from a non-compliant one
> pdf_dplyr_fixed2 <- pdata.frame(pdf_dplyr, index = c("id", "t"))
Warning message:
In pdata.frame(pdf_dplyr, index = c("id", "t")) :
  input 'x' claims to be a pdata.frame but does not have compliant properties, so tried to re-create a compliant pdata.frame from 'x'
> stopifnot(isTRUE(all.equal(pdf_dplyr_fixed, pdf_dplyr_fixed2)))
> 
> proc.time()
   user  system elapsed 
   1.46    0.34    1.82 
